# 1 "Lexer.mll"
 
open Parser
open Lexing
open Error

let keyword_table = Hashtbl.create 17
let _ =
  List.iter (fun (k,d) -> Hashtbl.add keyword_table k d) 
   [
     "class"	    , CLASS;
     "else"         , ELSE;
     "extends"	    , EXTENDS;
     "false"        , FALSE;
     "if"           , IF;
     "in"           , IN;
     "instanceof"   , INSTANCEOF;
     "new"	    , NEW;
     "null"	    , NULL;
     "static"       , STATIC;
     "this"         , THIS;
     "true"         , TRUE;
   ]

let string_start_loc = ref Location.none;;
let comment_start_loc = ref Location.none;;

let buff = Buffer.create 256

# 31 "Lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\224\255\225\255\002\000\003\000\030\000\002\000\001\000\
    \235\255\237\255\238\255\239\255\031\000\241\255\242\255\243\255\
    \244\255\245\255\246\255\247\255\248\255\079\000\089\000\164\000\
    \105\000\003\000\255\255\001\000\004\000\253\255\227\255\234\255\
    \233\255\226\255\230\255\228\255\021\001\251\255\252\255\005\000\
    \221\000\255\255\254\255\138\000\252\255\253\255\254\255\006\000\
    \011\000\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\026\000\024\000\023\000\031\000\031\000\
    \255\255\255\255\255\255\255\255\015\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\006\000\005\000\004\000\
    \019\000\001\000\255\255\000\000\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \002\000\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \002\000\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\028\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\037\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\045\000\000\000\000\000\000\000\255\255\
    \255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\026\000\026\000\025\000\027\000\255\255\038\000\
    \046\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\005\000\020\000\025\000\000\000\008\000\007\000\031\000\
    \019\000\018\000\009\000\011\000\013\000\010\000\014\000\024\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\049\000\015\000\003\000\012\000\004\000\035\000\
    \034\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\033\000\030\000\000\000\000\000\000\000\
    \000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\017\000\006\000\016\000\032\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\029\000\046\000\000\000\000\000\047\000\
    \028\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\048\000\000\000\000\000\000\000\
    \022\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\042\000\
    \002\000\000\000\000\000\023\000\255\255\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\038\000\
    \000\000\000\000\039\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
    \000\000\042\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\038\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\027\000\025\000\000\000\028\000\039\000\
    \047\000\028\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\025\000\255\255\000\000\000\000\007\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\048\000\000\000\000\000\000\000\000\000\003\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\005\000\012\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\024\000\043\000\255\255\255\255\043\000\
    \024\000\255\255\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\043\000\255\255\255\255\255\255\
    \022\000\255\255\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\022\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\040\000\
    \000\000\255\255\255\255\023\000\028\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\036\000\
    \255\255\255\255\036\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\000\
    \255\255\040\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\040\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\036\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\043\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\036\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 40 "Lexer.mll"
      ( 
	Location.incr_line lexbuf; 
	token lexbuf 
      )
# 217 "Lexer.ml"

  | 1 ->
# 45 "Lexer.mll"
      ( token lexbuf )
# 222 "Lexer.ml"

  | 2 ->
# 47 "Lexer.mll"
    ( 
      comment_start_loc := Location.curr lexbuf;
      comment lexbuf; 
      token lexbuf 
    )
# 231 "Lexer.ml"

  | 3 ->
# 53 "Lexer.mll"
    ( token lexbuf )
# 236 "Lexer.ml"

  | 4 ->
let
# 54 "Lexer.mll"
                             id
# 242 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 55 "Lexer.mll"
      ( try Hashtbl.find keyword_table id
        with Not_found -> LIDENT id )
# 247 "Lexer.ml"

  | 5 ->
let
# 57 "Lexer.mll"
                             id
# 253 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 58 "Lexer.mll"
      ( UIDENT id )
# 257 "Lexer.ml"

  | 6 ->
let
# 59 "Lexer.mll"
              nb
# 263 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 60 "Lexer.mll"
      ( INT (int_of_string nb) )
# 267 "Lexer.ml"

  | 7 ->
# 62 "Lexer.mll"
      ( 
	Buffer.reset buff;
        let string_start = lexbuf.lex_start_p in
          string_start_loc := Location.curr lexbuf;
          string lexbuf;
          lexbuf.lex_start_p <- string_start;
          STRING (Buffer.contents buff) 
      )
# 279 "Lexer.ml"

  | 8 ->
# 70 "Lexer.mll"
          ( LPAREN )
# 284 "Lexer.ml"

  | 9 ->
# 71 "Lexer.mll"
          ( RPAREN )
# 289 "Lexer.ml"

  | 10 ->
# 72 "Lexer.mll"
          ( LBRACE )
# 294 "Lexer.ml"

  | 11 ->
# 73 "Lexer.mll"
          ( RBRACE )
# 299 "Lexer.ml"

  | 12 ->
# 74 "Lexer.mll"
          ( SEMI )
# 304 "Lexer.ml"

  | 13 ->
# 75 "Lexer.mll"
          ( DOT )
# 309 "Lexer.ml"

  | 14 ->
# 76 "Lexer.mll"
          ( COMMA )
# 314 "Lexer.ml"

  | 15 ->
# 77 "Lexer.mll"
          ( EQUAL )
# 319 "Lexer.ml"

  | 16 ->
# 78 "Lexer.mll"
          ( PLUS )
# 324 "Lexer.ml"

  | 17 ->
# 79 "Lexer.mll"
          ( MINUS )
# 329 "Lexer.ml"

  | 18 ->
# 80 "Lexer.mll"
          ( TIMES )
# 334 "Lexer.ml"

  | 19 ->
# 81 "Lexer.mll"
          ( DIV )
# 339 "Lexer.ml"

  | 20 ->
# 82 "Lexer.mll"
          ( MOD )
# 344 "Lexer.ml"

  | 21 ->
# 83 "Lexer.mll"
          ( AND )
# 349 "Lexer.ml"

  | 22 ->
# 84 "Lexer.mll"
          ( OR )
# 354 "Lexer.ml"

  | 23 ->
# 85 "Lexer.mll"
          ( NOT )
# 359 "Lexer.ml"

  | 24 ->
# 86 "Lexer.mll"
          ( GT )
# 364 "Lexer.ml"

  | 25 ->
# 87 "Lexer.mll"
          ( GE )
# 369 "Lexer.ml"

  | 26 ->
# 88 "Lexer.mll"
          ( LT )
# 374 "Lexer.ml"

  | 27 ->
# 89 "Lexer.mll"
          ( LE )
# 379 "Lexer.ml"

  | 28 ->
# 90 "Lexer.mll"
          ( EQ )
# 384 "Lexer.ml"

  | 29 ->
# 91 "Lexer.mll"
          ( NEQ )
# 389 "Lexer.ml"

  | 30 ->
# 92 "Lexer.mll"
          ( EOF )
# 394 "Lexer.ml"

  | 31 ->
# 93 "Lexer.mll"
          ( illegal_char (Lexing.lexeme_char lexbuf 0) (Location.curr lexbuf) )
# 399 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 36
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 96 "Lexer.mll"
        ( () )
# 410 "Lexer.ml"

  | 1 ->
let
# 97 "Lexer.mll"
                           escape_char
# 416 "Lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 98 "Lexer.mll"
      ( 
	Buffer.add_string buff escape_char;
	string lexbuf 
      )
# 423 "Lexer.ml"

  | 2 ->
# 103 "Lexer.mll"
      ( 
	illegal_escape_char (Location.curr lexbuf)
      )
# 430 "Lexer.ml"

  | 3 ->
# 107 "Lexer.mll"
 ( 
	  unterminated_string !string_start_loc 
	)
# 437 "Lexer.ml"

  | 4 ->
# 111 "Lexer.mll"
      ( 
	Buffer.add_char buff (lexeme_char lexbuf 0); 
	string lexbuf 
      )
# 445 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_string_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 43
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 117 "Lexer.mll"
         ( () )
# 456 "Lexer.ml"

  | 1 ->
# 119 "Lexer.mll"
      ( 
	Location.incr_line lexbuf; 
        comment lexbuf
      )
# 464 "Lexer.ml"

  | 2 ->
# 123 "Lexer.mll"
         ( comment lexbuf )
# 469 "Lexer.ml"

  | 3 ->
# 124 "Lexer.mll"
         ( unterminated_comment !comment_start_loc )
# 474 "Lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

