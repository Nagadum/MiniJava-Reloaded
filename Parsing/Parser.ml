type token =
  | EOF
  | INT of (int)
  | LIDENT of (string)
  | UIDENT of (string)
  | STRING of (string)
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | SEMI
  | DOT
  | COMMA
  | EQUAL
  | CLASS
  | ELSE
  | EXTENDS
  | FALSE
  | IF
  | IN
  | INSTANCEOF
  | NEW
  | NULL
  | STATIC
  | THIS
  | TRUE
  | AND
  | OR
  | NOT
  | GT
  | GE
  | LT
  | LE
  | EQ
  | NEQ
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD

open Parsing;;
# 2 "Parser.mly"
  open AST
  open Location

  let parse_error str =
    Error.syntax (symbol_loc())

  let mkexp d = 
    { 
      edesc = d;
      eloc  = symbol_loc();
      etype = None;
    }

  let mkval v = 
    { 
      edesc = Val v;
      eloc  = symbol_loc();
      etype = None;
    }

  let mkexploc d loc = 
    { 
      edesc = d;
      eloc  = loc;
      etype = None;
    }

  let mkclass n p a m = 
    { 
      cname = n;
      cparent = p;
      cattributes = a;
      cmethods = m;
      cloc  = symbol_loc();
    }

  let mkatt n t s d = 
    {
      aname = n;
      atype = t;
      astatic = s;
      adefault = d;
      aloc  = symbol_loc();
    }

  let mkmeth n r a s b =
    {
      mname = n;
      mreturntype = r;
      margstype = a;
      mstatic = s;
      mbody = b;
      mloc  = symbol_loc();
    }
# 99 "Parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  261 (* LPAREN *);
  262 (* RPAREN *);
  263 (* LBRACE *);
  264 (* RBRACE *);
  265 (* SEMI *);
  266 (* DOT *);
  267 (* COMMA *);
  268 (* EQUAL *);
  269 (* CLASS *);
  270 (* ELSE *);
  271 (* EXTENDS *);
  272 (* FALSE *);
  273 (* IF *);
  274 (* IN *);
  275 (* INSTANCEOF *);
  276 (* NEW *);
  277 (* NULL *);
  278 (* STATIC *);
  279 (* THIS *);
  280 (* TRUE *);
  281 (* AND *);
  282 (* OR *);
  283 (* NOT *);
  284 (* GT *);
  285 (* GE *);
  286 (* LT *);
  287 (* LE *);
  288 (* EQ *);
  289 (* NEQ *);
  290 (* PLUS *);
  291 (* MINUS *);
  292 (* TIMES *);
  293 (* DIV *);
  294 (* MOD *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* LIDENT *);
  259 (* UIDENT *);
  260 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\003\000\003\000\003\000\
\005\000\005\000\006\000\006\000\007\000\007\000\008\000\008\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\009\000\009\000\010\000\010\000\012\000\
\012\000\011\000\011\000\011\000\011\000\011\000\000\000"

let yylen = "\002\000\
\007\000\002\000\001\000\002\000\000\000\006\000\010\000\000\000\
\001\000\000\000\002\000\000\000\001\000\000\000\004\000\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\008\000\003\000\008\000\002\000\006\000\004\000\003\000\001\000\
\001\000\001\000\003\000\004\000\000\000\001\000\000\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\050\000\000\000\000\000\051\000\000\000\
\000\000\054\000\000\000\000\000\052\000\041\000\053\000\000\000\
\000\000\055\000\000\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\000\000\000\000\000\000\000\000\000\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\000\000\000\000\001\000\000\000\000\000\000\000\035\000\000\000\
\000\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\006\000\000\000\000\000\
\000\000\044\000\000\000\015\000\000\000\007\000"

let yydgoto = "\002\000\
\018\000\052\000\078\000\019\000\079\000\098\000\102\000\103\000\
\100\000\082\000\020\000\083\000"

let yysindex = "\004\000\
\110\001\000\000\000\000\000\000\004\255\012\255\000\000\060\255\
\014\255\000\000\015\255\018\255\000\000\000\000\000\000\107\255\
\107\255\000\000\006\001\000\000\107\255\010\255\013\255\126\255\
\008\255\107\255\000\000\022\255\022\255\000\000\107\255\023\255\
\021\255\107\255\107\255\107\255\107\255\107\255\107\255\107\255\
\107\255\107\255\107\255\107\255\107\255\107\255\221\255\107\255\
\107\255\000\000\030\255\028\255\159\255\192\002\032\255\000\000\
\250\002\221\002\068\255\068\255\068\255\068\255\023\003\023\003\
\248\254\248\254\022\255\022\255\022\255\162\002\022\255\000\000\
\016\255\035\255\107\255\036\255\000\000\031\255\054\255\107\255\
\192\002\062\255\049\255\107\255\110\001\064\255\192\255\000\000\
\107\255\070\002\000\000\254\254\055\255\192\002\000\000\067\255\
\107\255\063\255\066\255\000\000\069\255\073\255\071\255\221\255\
\016\255\107\255\000\000\079\255\072\255\000\000\101\002\107\255\
\086\255\000\000\132\002\000\000\016\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\082\255\000\000\000\000\067\000\100\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\051\002\055\002\140\001\173\001\206\001\239\001\017\002\021\002\
\041\001\074\001\133\000\166\000\199\000\000\000\232\000\000\000\
\001\255\000\000\085\255\000\000\000\000\000\000\000\000\000\000\
\000\255\000\000\087\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\255\034\000\002\255\000\000\090\255\
\000\000\000\000\000\000\000\000\000\000\000\000\091\255\083\255\
\001\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\255\000\000"

let yygindex = "\000\000\
\013\000\000\000\151\255\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yytablesize = 1085
let yytable = "\110\000\
\040\000\032\000\096\000\010\000\001\000\049\000\034\000\048\000\
\008\000\097\000\049\000\118\000\048\000\022\000\022\000\021\000\
\025\000\024\000\049\000\026\000\027\000\048\000\051\000\056\000\
\055\000\028\000\029\000\044\000\045\000\046\000\047\000\032\000\
\072\000\045\000\073\000\053\000\075\000\077\000\085\000\031\000\
\054\000\080\000\084\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\086\000\070\000\071\000\089\000\004\000\005\000\023\000\007\000\
\008\000\092\000\017\000\088\000\099\000\101\000\107\000\105\000\
\106\000\012\000\113\000\010\000\011\000\032\000\108\000\012\000\
\013\000\109\000\014\000\015\000\081\000\112\000\016\000\116\000\
\005\000\087\000\047\000\011\000\046\000\090\000\017\000\014\000\
\013\000\091\000\094\000\032\000\000\000\042\000\043\000\044\000\
\045\000\046\000\104\000\004\000\005\000\006\000\007\000\008\000\
\000\000\000\000\000\000\111\000\000\000\000\000\000\000\000\000\
\000\000\115\000\010\000\011\000\000\000\000\000\012\000\013\000\
\000\000\014\000\015\000\050\000\020\000\016\000\031\000\032\000\
\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\
\033\000\000\000\000\000\000\000\000\000\000\000\034\000\035\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\074\000\021\000\000\000\031\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\034\000\
\035\000\000\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\000\000\022\000\093\000\
\031\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\034\000\035\000\000\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\032\000\038\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\034\000\035\000\000\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\000\000\000\000\030\000\040\000\000\000\
\040\000\040\000\040\000\040\000\034\000\000\000\034\000\034\000\
\000\000\034\000\040\000\040\000\000\000\000\000\000\000\000\000\
\034\000\040\000\040\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\045\000\
\019\000\045\000\045\000\045\000\045\000\031\000\000\000\031\000\
\000\000\000\000\031\000\045\000\045\000\000\000\000\000\000\000\
\000\000\031\000\045\000\045\000\000\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\017\000\018\000\017\000\017\000\000\000\017\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\017\000\000\000\000\000\
\000\000\000\000\000\000\017\000\017\000\000\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\017\000\032\000\000\000\032\000\032\000\003\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\032\000\032\000\000\000\
\000\000\000\000\000\000\000\000\032\000\032\000\000\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\020\000\025\000\020\000\020\000\000\000\020\000\
\000\000\000\000\000\000\000\000\000\000\000\000\020\000\020\000\
\000\000\000\000\000\000\000\000\000\000\020\000\020\000\000\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\021\000\026\000\021\000\021\000\000\000\
\021\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\021\000\000\000\000\000\000\000\000\000\000\000\021\000\021\000\
\000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\022\000\027\000\022\000\022\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\022\000\000\000\000\000\000\000\000\000\000\000\022\000\
\022\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\038\000\028\000\038\000\
\038\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
\000\000\038\000\038\000\000\000\000\000\000\000\000\000\000\000\
\038\000\038\000\000\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\031\000\032\000\
\029\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\
\033\000\000\000\000\000\000\000\000\000\000\000\034\000\035\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\000\000\000\000\019\000\000\000\
\019\000\019\000\023\000\019\000\000\000\000\000\024\000\000\000\
\000\000\000\000\019\000\019\000\000\000\000\000\000\000\000\000\
\000\000\019\000\019\000\000\000\019\000\019\000\019\000\019\000\
\019\000\019\000\019\000\019\000\000\000\000\000\000\000\018\000\
\000\000\018\000\018\000\000\000\018\000\000\000\000\000\000\000\
\000\000\000\000\000\000\018\000\018\000\000\000\000\000\000\000\
\000\000\000\000\018\000\018\000\000\000\018\000\018\000\018\000\
\018\000\018\000\018\000\018\000\018\000\000\000\004\000\005\000\
\006\000\007\000\008\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\010\000\011\000\000\000\
\000\000\012\000\013\000\000\000\014\000\015\000\000\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\025\000\000\000\025\000\025\000\000\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\025\000\000\000\
\000\000\000\000\000\000\000\000\025\000\025\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\000\000\000\000\000\000\
\000\000\000\000\026\000\000\000\026\000\026\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\
\000\000\000\000\000\000\000\000\000\000\026\000\026\000\000\000\
\026\000\026\000\026\000\026\000\026\000\026\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\027\000\027\000\000\000\
\027\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\027\000\000\000\000\000\000\000\000\000\000\000\027\000\027\000\
\000\000\027\000\027\000\027\000\027\000\027\000\027\000\000\000\
\000\000\000\000\000\000\000\000\028\000\000\000\028\000\028\000\
\000\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\000\028\000\000\000\000\000\000\000\000\000\000\000\028\000\
\028\000\000\000\028\000\028\000\028\000\028\000\028\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\029\000\029\000\030\000\029\000\030\000\030\000\000\000\030\000\
\000\000\000\000\029\000\000\000\000\000\000\000\030\000\000\000\
\000\000\029\000\029\000\000\000\000\000\030\000\030\000\000\000\
\029\000\029\000\000\000\000\000\030\000\030\000\000\000\000\000\
\023\000\000\000\023\000\023\000\024\000\023\000\024\000\024\000\
\000\000\024\000\000\000\000\000\023\000\000\000\000\000\000\000\
\024\000\000\000\000\000\023\000\023\000\095\000\031\000\032\000\
\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\000\000\000\000\000\000\000\000\034\000\035\000\
\000\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\114\000\031\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\034\000\035\000\000\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\117\000\031\000\032\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\
\000\000\000\000\000\000\000\000\034\000\035\000\000\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\031\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\076\000\033\000\000\000\000\000\000\000\
\000\000\000\000\034\000\035\000\000\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\031\000\032\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\034\000\035\000\000\000\036\000\037\000\038\000\039\000\040\000\
\041\000\042\000\043\000\044\000\045\000\046\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\034\000\000\000\000\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\032\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\036\000\037\000\038\000\039\000\000\000\000\000\
\042\000\043\000\044\000\045\000\046\000"

let yycheck = "\105\000\
\000\000\010\001\005\001\003\001\001\000\006\001\000\000\006\001\
\008\001\012\001\011\001\117\000\011\001\002\001\002\001\012\001\
\003\001\008\000\006\001\005\001\003\001\012\001\015\001\003\001\
\002\001\016\000\017\000\036\001\037\001\038\001\021\000\010\001\
\003\001\000\000\007\001\026\000\005\001\022\001\008\001\000\000\
\031\000\007\001\007\001\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\
\003\001\048\000\049\000\011\001\001\001\002\001\003\001\004\001\
\005\001\002\001\000\000\006\001\014\001\003\001\002\001\009\001\
\007\001\009\001\003\001\016\001\017\001\010\001\006\001\020\001\
\021\001\011\001\023\001\024\001\075\000\007\001\027\001\002\001\
\007\001\080\000\006\001\009\001\006\001\084\000\035\001\006\001\
\006\001\085\000\089\000\000\000\255\255\034\001\035\001\036\001\
\037\001\038\001\097\000\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\255\255\106\000\255\255\255\255\255\255\255\255\
\255\255\112\000\016\001\017\001\255\255\255\255\020\001\021\001\
\255\255\023\001\024\001\006\001\000\000\027\001\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\035\001\255\255\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\006\001\000\000\255\255\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\255\255\000\000\008\001\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\010\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\255\255\000\000\006\001\255\255\
\008\001\009\001\010\001\011\001\006\001\255\255\008\001\009\001\
\255\255\011\001\018\001\019\001\255\255\255\255\255\255\255\255\
\018\001\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\038\001\006\001\
\000\000\008\001\009\001\010\001\011\001\006\001\255\255\008\001\
\255\255\255\255\011\001\018\001\019\001\255\255\255\255\255\255\
\255\255\018\001\025\001\026\001\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\006\001\000\000\008\001\009\001\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\255\255\255\255\
\255\255\255\255\255\255\025\001\026\001\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\006\001\255\255\008\001\009\001\000\000\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\006\001\000\000\008\001\009\001\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\006\001\000\000\008\001\009\001\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\006\001\000\000\008\001\009\001\
\255\255\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\006\001\000\000\008\001\
\009\001\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\018\001\019\001\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\009\001\010\001\
\000\000\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\255\255\255\255\006\001\255\255\
\008\001\009\001\000\000\011\001\255\255\255\255\000\000\255\255\
\255\255\255\255\018\001\019\001\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\006\001\
\255\255\008\001\009\001\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\255\255\001\001\002\001\
\003\001\004\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\013\001\255\255\255\255\016\001\017\001\255\255\
\255\255\020\001\021\001\255\255\023\001\024\001\255\255\255\255\
\027\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\035\001\006\001\255\255\008\001\009\001\255\255\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\018\001\019\001\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\255\255\255\255\255\255\
\255\255\255\255\006\001\255\255\008\001\009\001\255\255\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\255\255\255\255\
\255\255\255\255\255\255\006\001\255\255\008\001\009\001\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\255\255\
\255\255\255\255\255\255\255\255\006\001\255\255\008\001\009\001\
\255\255\011\001\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\255\255\255\255\255\255\255\255\255\255\025\001\
\026\001\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\255\255\255\255\255\255\255\255\255\255\255\255\006\001\255\255\
\008\001\009\001\006\001\011\001\008\001\009\001\255\255\011\001\
\255\255\255\255\018\001\255\255\255\255\255\255\018\001\255\255\
\255\255\025\001\026\001\255\255\255\255\025\001\026\001\255\255\
\032\001\033\001\255\255\255\255\032\001\033\001\255\255\255\255\
\006\001\255\255\008\001\009\001\006\001\011\001\008\001\009\001\
\255\255\011\001\255\255\255\255\018\001\255\255\255\255\255\255\
\018\001\255\255\255\255\025\001\026\001\008\001\009\001\010\001\
\026\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\019\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\255\255\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\008\001\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\255\255\255\255\025\001\026\001\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\255\255\
\255\255\255\255\255\255\255\255\025\001\026\001\255\255\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\009\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\019\001\255\255\255\255\255\255\
\255\255\255\255\025\001\026\001\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\255\255\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\019\001\
\255\255\255\255\255\255\255\255\255\255\025\001\255\255\255\255\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\019\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\019\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\255\255\255\255\
\034\001\035\001\036\001\037\001\038\001"

let yynames_const = "\
  EOF\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  SEMI\000\
  DOT\000\
  COMMA\000\
  EQUAL\000\
  CLASS\000\
  ELSE\000\
  EXTENDS\000\
  FALSE\000\
  IF\000\
  IN\000\
  INSTANCEOF\000\
  NEW\000\
  NULL\000\
  STATIC\000\
  THIS\000\
  TRUE\000\
  AND\000\
  OR\000\
  NOT\000\
  GT\000\
  GE\000\
  LT\000\
  LE\000\
  EQ\000\
  NEQ\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  "

let yynames_block = "\
  INT\000\
  LIDENT\000\
  UIDENT\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'parent) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'classBody) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : AST.astprogram) in
    Obj.repr(
# 120 "Parser.mly"
      ( 
	let cl,e = _7 in
	let al,ml = _5 in
	  (mkclass _2 _3 al ml):: cl, e
      )
# 558 "Parser.ml"
               : AST.astprogram))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 126 "Parser.mly"
      ( [], Some _1 )
# 565 "Parser.ml"
               : AST.astprogram))
; (fun __caml_parser_env ->
    Obj.repr(
# 128 "Parser.mly"
      ( [], None )
# 571 "Parser.ml"
               : AST.astprogram))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 133 "Parser.mly"
      ( _2 )
# 578 "Parser.ml"
               : 'parent))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "Parser.mly"
      ( "Object" )
# 584 "Parser.ml"
               : 'parent))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'static) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'initialization) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'classBody) in
    Obj.repr(
# 140 "Parser.mly"
      (

	let al,ml = _6 in 
	  (mkatt _3 _2 _1 _4) :: al, ml
      )
# 599 "Parser.ml"
               : 'classBody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'static) in
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'argumentso) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'classBody) in
    Obj.repr(
# 147 "Parser.mly"
      (
	let al,ml = _10 in 
	  al, (mkmeth _3 _2 _5 _1 _8) :: ml
      )
# 614 "Parser.ml"
               : 'classBody))
; (fun __caml_parser_env ->
    Obj.repr(
# 152 "Parser.mly"
      ( [],[] )
# 620 "Parser.ml"
               : 'classBody))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "Parser.mly"
                  ( true )
# 626 "Parser.ml"
               : 'static))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "Parser.mly"
                  ( false )
# 632 "Parser.ml"
               : 'static))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 160 "Parser.mly"
                     ( Some _2 )
# 639 "Parser.ml"
               : 'initialization))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "Parser.mly"
                     ( None )
# 645 "Parser.ml"
               : 'initialization))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments) in
    Obj.repr(
# 166 "Parser.mly"
      ( _1 )
# 652 "Parser.ml"
               : 'argumentso))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "Parser.mly"
      ( [] )
# 658 "Parser.ml"
               : 'argumentso))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'arguments) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 173 "Parser.mly"
      ( (_4,_3)::_1 )
# 667 "Parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 175 "Parser.mly"
      ( [_2,_1] )
# 675 "Parser.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 180 "Parser.mly"
      ( mkexp (Call(_2,"not",[])) )
# 682 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 182 "Parser.mly"
      ( mkexp (Call(_1,"sub",[_3])) )
# 690 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 184 "Parser.mly"
      ( mkexp (Call(_1,"add",[_3])) )
# 698 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 186 "Parser.mly"
      ( mkexp (Call(_1,"mul",[_3])) )
# 706 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 188 "Parser.mly"
      ( mkexp (Call(_1,"div",[_3])) )
# 714 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 190 "Parser.mly"
      ( mkexp (Call(_1,"mod",[_3])) )
# 722 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 192 "Parser.mly"
      ( mkexp (Call(_1,"and",[_3])) )
# 730 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 194 "Parser.mly"
      ( mkexp (Call(_1,"or",[_3])) )
# 738 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 196 "Parser.mly"
      ( mkexp (Call(_1,"gt",[_3])) )
# 746 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 198 "Parser.mly"
      ( mkexp (Call(_1,"ge",[_3])) )
# 754 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 200 "Parser.mly"
      ( mkexp (Call(_1,"lt",[_3])) )
# 762 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 202 "Parser.mly"
      ( mkexp (Call(_1,"le",[_3])) )
# 770 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 204 "Parser.mly"
      ( mkexp (Call(_1,"eq",[_3])) )
# 778 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 206 "Parser.mly"
      ( mkexp (Call(_1,"neq",[_3])) )
# 786 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 208 "Parser.mly"
      ( mkexp (Seq(_1,_3)) )
# 794 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 210 "Parser.mly"
      ( mkexp (Call(_2,"neg",[])) )
# 801 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'elseo) in
    Obj.repr(
# 212 "Parser.mly"
      ( match _8 with
	  | None -> mkexp (If(_3, _6, None))
	  | Some e -> mkexp (If(_3, _6, Some e))
      )
# 813 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 217 "Parser.mly"
      ( mkexp (Assign(_1,_3)) )
# 821 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 219 "Parser.mly"
      ( mkexp (Define(_2,_1,_4,_7)) )
# 831 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 221 "Parser.mly"
      ( mkexp (New _2) )
# 838 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'paramso) in
    Obj.repr(
# 223 "Parser.mly"
      ( mkexp (Call(_1,_3,_5)) )
# 847 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 225 "Parser.mly"
      ( mkexp (Cast(_2,_4)) )
# 855 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 227 "Parser.mly"
      ( mkexp (Instanceof(_1,_3)) )
# 863 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 229 "Parser.mly"
      ( mkexp (Var _1) )
# 870 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 231 "Parser.mly"
      ( mkexp (Var "this") )
# 876 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'value) in
    Obj.repr(
# 233 "Parser.mly"
      ( _1 )
# 883 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 235 "Parser.mly"
      ( _2 )
# 890 "Parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 240 "Parser.mly"
      ( Some _3 )
# 897 "Parser.ml"
               : 'elseo))
; (fun __caml_parser_env ->
    Obj.repr(
# 242 "Parser.mly"
      ( None )
# 903 "Parser.ml"
               : 'elseo))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params) in
    Obj.repr(
# 247 "Parser.mly"
      ( _1 )
# 910 "Parser.ml"
               : 'paramso))
; (fun __caml_parser_env ->
    Obj.repr(
# 249 "Parser.mly"
      ( [] )
# 916 "Parser.ml"
               : 'paramso))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'params) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 254 "Parser.mly"
      ( _3::_1 )
# 924 "Parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 256 "Parser.mly"
      ( [_1] )
# 931 "Parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 260 "Parser.mly"
           ( mkval (Int _1) )
# 938 "Parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 261 "Parser.mly"
           ( mkval (String _1) )
# 945 "Parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    Obj.repr(
# 262 "Parser.mly"
           ( mkval (Null) )
# 951 "Parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    Obj.repr(
# 263 "Parser.mly"
           ( mkval (Boolean true) )
# 957 "Parser.ml"
               : 'value))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "Parser.mly"
           ( mkval (Boolean false) )
# 963 "Parser.ml"
               : 'value))
(* Entry start *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let start (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : AST.astprogram)
